---
title: "Advanced Pandas Joins "
author: "Ester Nepolo"
---

## Packages

```{python}
import pandas as pd
import country_converter as cc
```

## Datasets & Packages

Run the code below to load and define the datasets to be used in this lesson.

```{python}
# Load datasets
oil_consumption = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/oil_consumption.csv"
)
tidyr_population = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/tidyr_population.csv"
)
country_regions = pd.read_csv(
    "https://raw.githubusercontent.com/the-graph-courses/idap_book/main/data/country_continent_data.csv"
)


oil_2012 = (
    oil_consumption[oil_consumption["year"] == 2012].copy().drop(columns=["year"])
)

# people data
people = pd.DataFrame({"name": ["Alice", "Bob", "Charlie"], "age": [25, 32, 45]})

test_info_many = pd.DataFrame(
    {
        "name": ["Alice", "Alice", "Bob", "Bob", "Charlie", "Charlie"],
        "test_date": [
            "2023-06-05",
            "2023-06-10",
            "2023-08-10",
            "2023-05-02",
            "2023-05-12",
            "2023-05-15",
        ],
        "result": [
            "Negative",
            "Positive",
            "Positive",
            "Negative",
            "Negative",
            "Negative",
        ],
    }
)

farm_info = pd.DataFrame(
    {
        "farm_id": [1, 2, 3],
        "farm_name": ["Green Acres", "Harvest Hill", "Golden Fields"],
        "location": ["County A", "County B", "County A"],
    }
)

crop_yields = pd.DataFrame(
    {
        "farm_id": [1, 1, 2, 3, 3],
        "crop": ["Wheat", "Corn", "Soybeans", "Wheat", "Barley"],
        "yield_tons": [50, 60, 45, 55, 30],
    }
)

traffic_flow = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "vehicle_count": [1200, 900, 1500, 1100, 700, 600],
    }
)

pollution_levels = pd.DataFrame(
    {
        "street_name": [
            "Main St",
            "Main St",
            "Broadway",
            "Broadway",
            "Elm St",
            "Elm St",
        ],
        "time_of_day": ["9am", "2pm", "9am", "2pm", "9am", "2pm"],
        "pm_2_5_level": [35.5, 42.1, 40.3, 48.2, 25.7, 30.9],
    }
)

test_info_diff = pd.DataFrame(
    {
        "name": ["alice", "Bob", "Charlie "],
        "test_date": ["2023-06-05", "2023-08-10", "2023-05-02"],
        "result": ["Negative", "Positive", "Negative"],
    }
)

asia_countries = pd.DataFrame(
    {
        "Country": ["India", "Indonesia", "Philippines"],
        "Capital": ["New Delhi", "Jakarta", "Manila"],
    }
)

asia_population = pd.DataFrame(
    {
        "Country": ["India", "indonesia", "Philipines"],
        "Population": [1393000000, 273500000, 113000000],
        "Life_Expectancy": [69.7, 71.7, 72.7],
    }
)
```


## Packages

```{python}
import pandas as pd
import country_converter as cc
```

## One to many


```{python}
people
```


```{python}
test_info_many
```


```{python}
pd.merge(people, test_info_many,)
```

## Practice Q: Merging One-to-Many Crop Yields

Run the code below to print the two small dataframes:


```{python}
farm_info
```


```{python}
crop_yields
```

If you use a `merge()` to join these datasets, how many rows will be in the final dataframe? 

**5 rows**

Try to figure it out and then perform the join to see if you were right.

```{python}
pd.merge(farm_info, crop_yields)
```

## Multiple Key Columns


```{python}
traffic_flow
```


```{python}
pollution_levels
```


```{python}
# this is incorrect, columns are being duplicated
pd.merge(traffic_flow, pollution_levels, on="street_name")
```


```{python}
pd.merge(traffic_flow, pollution_levels, on=["street_name", "time_of_day"])
```

## Practice Q: Calculate Oil Consumption per Capita
We have two datasets containing information about countries:

- oil_consumption: Contains yearly oil consumption in tonnes
- tidyr_population: Contains yearly population data


```{python}
# View the datasets
oil_consumption = oil_consumption.sort_values(by=["country", "year"])
oil_consumption
```


```{python}
tidyr_population = tidyr_population.sort_values(by=["country", "year"])
tidyr_population
```


1. Join these datasets using merge() with a left join. Since we want to match both country AND year, youâ€™ll need to join on multiple columns. (You may notice that not all rows are matched. You can ignore this for now.)

2. After joining, create a new column called consumption_per_capita that calculates the yearly oil consumption per person (in tonnes).

3. Which country had the highest per capita oil consumption in 1995?

**Singapore**

```{python}
# data join
oil_consumption_pop_join = pd.merge(oil_consumption, tidyr_population, on=["country", "year"], how="left")
oil_consumption_pop_join
```

```{python}
# creating a consumption per capita column
oil_consumption_pop_join["consumption_per_capita"] = oil_consumption_pop_join["oil_consump"] / oil_consumption_pop_join["population"]
oil_consumption_pop_join
```

```{python}
# Filter for the year 1995
data_1995 = oil_consumption_pop_join[oil_consumption_pop_join["year"] == 1995]

# Find the row with the maximum consumption per capita
highest_per_capita_1995 = data_1995.loc[data_1995["consumption_per_capita"].idxmax()]

# Sort by country with highest per capita consumption
sorted_data_1995 = data_1995.sort_values(by=["consumption_per_capita"], ascending=False)
sorted_data_1995

#  You can also display the country with the highest per capita oil consumption
highest_country = highest_per_capita_1995["country"]
highest_per_capita_value = highest_per_capita_1995["consumption_per_capita"]
highest_country

print(f"The country with the highest per capita oil consumption in 1995 is {highest_country} with {highest_per_capita_value} consumption per capita.")
data_1995.loc[data_1995["consumption_per_capita"].idxmax()]

# Or you can use LLM to print the country with the highest per capita oil consumption
highest_country = highest_per_capita_1995["country"]
highest_per_capita_value = highest_per_capita_1995["consumption_per_capita"]

print(f"The country with the highest per capita oil consumption in 1995 is {highest_country} with {highest_per_capita_value} consumption per capita.")

```

## Key Mismatches

```{python}
people
```

```{python}
test_info_diff
```

```{python}
# the names in name are not maching as some are written with a capital letters while others are written in lowercase
pd.merge(people, test_info_diff)
```

```{python}
# to fix the names capitalisation
test_info_diff["name"] = test_info_diff["name"].str.title()

```

```{python}
# this only successfully join Alice and Bob
pd.merge(people, test_info_diff)
```

```{python}
# let us explore more using .unique()
test_info_diff["name"].unique()
```

```{python}
# there is a white space in 'Charlie ' and it can be removed by running this code
test_info_diff["name"] = test_info_diff["name"].str.strip()
```

```{python}
test_info_diff["name"] = test_info_diff["name"].str.strip()
test_info_diff
```

```{python}
pd.merge(people, test_info_diff)
```

## Practice Q: Inner Join Countries

The following two datasets contain data for India, Indonesia, and the Philippines. However, an inner join of these datasets only returns 1 row. 

```{python}
asia_countries
```

```{python}
asia_population
```

```{python}
pd.merge(asia_countries, asia_population)
```

```{python}
# Capitalize 
asia_population["Country"] = asia_population["Country"].str.title()

# Correct the spelling of 'Philipines' to 'Philippines'
asia_population["Country"] = asia_population["Country"].str.replace("Philipines", "Philippines", regex=False)

```

```{python}
pd.merge(asia_countries, asia_population)
```

## Key Mismatches: Oil Consumption Example

```{python}
oil_consumption.sort_values(["country", "year"])
```

```{python}
tidyr_population
```

```{python}
oil_pop = pd.merge(oil_consumption, tidyr_population, how="left", on=["country", "year"])
oil_pop
```

```{python}
# set arithmetic
oil_countries = set(oil_consumption["country"].unique())
pop_countries = set(tidyr_population["country"].unique())

```

```{python}
pop_countries - oil_countries
```

```{python}
# Side note on the set arithmetic
set1 = set([1, 2, 3, 4, 5])
set2 = set([2, 3, 4])

set1 - set2
```

## Merging with Country Codes


```{python}
# this standardise the names
cc.convert("Viet Nam", to="ISO3")
```


```{python}

# Convert country names to ISO3 codes for both DataFrames
oil_consumption["country_code"] = cc.convert(oil_consumption["country"], to="ISO3")
tidyr_population["country_code"] = cc.convert(tidyr_population["country"], to="ISO3")
```

```{python}
oil_countries = set(oil_consumption["country_code"].unique())
pop_countries = set(tidyr_population["country_code"].unique())

```

```{python}
oil_countries-pop_countries
```

## Practice Q: Merging Oil Consumption with Geographic Data
Run the code to view the two datasets.

The first, oil_2012, records the oil consumption for the year 2012:


```{python}
oil_2012
```

And country_regions lists countries along with their respective regions and continents:

```{python}
country_regions
```

Join the two datasets using the country codes as the key. Then find the countries with the highest oil consumption in each continent. As a sanity check, your answer should include the US & China.


```{python}
oil_2012["country_code"] = cc.convert(oil_2012["country"], to='ISO3')

oil_2012_regions = oil_2012.merge(country_regions, on="country_code", how="left")

max_oil_by_continent = oil_2012_regions.loc[
    oil_2012_regions.groupby("continent")["oil_consump"].idxmax()
]

max_oil_by_continent.sort_values( by=["oil_consump"], ascending=False
)

```