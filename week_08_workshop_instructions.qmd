---
title: "Workshop Exercise: Grouping, Summarizing and Plotting"
author: "Ester Nepolo"
---

## Data Preparation

### Load Packages

To get started, **load in the needed packages**: pandas, numpy, plotly express.

```{python}
import pandas as pd
import numpy as np
import plotly.express as px
```

### Import Data

Download the `india_tuberculosis.csv` file from the course portal and save it in your `data` folder.

Now, **read in the `india_tuberculosis` dataset into Python from your data folder** into a DataFrame called `tb`. The DataFrame you import should have 880 rows and 21 columns. Remember to use relative paths to allow your script to use project-relative paths.

```{python}
# Import the CSV file
# Your code here
tb = pd.read_csv("data/india_tuberculosis.csv")
tb
```

Run the following line of code to convert all column names to lowercase and replace spaces with underscores:

```{python}
tb.columns = tb.columns.str.lower().str.replace(' ', '_')
tb
```

### Calculate Total Cost

Each patient record notes the location and cost of up to three visits. Add together these costs (`first_visit_cost`, `second_visit_cost`, and `third_visit_cost`) to create a `total_cost` variable.

```{python}
# Calculate total cost
tb["total_cost"] = (
    tb["first_visit_cost"] + tb["second_visit_cost"] + tb["third_visit_cost"]
)
tb
```

## Investigating Healthcare Costs by Education Level

### Reorder Education Levels

Before moving further, let's take a closer look at the `education` variable in our dataset:

```{python}
# Count unique values of education levels
tb["education"].value_counts()
```

You'll notice that education levels are ordered alphabetically by default! However, in this case, it would be more useful to reorder the education levels so that they are arranged in a chronological order.

First, use the `replace()` method to convert the "Graduate & Above" values to "Graduate".

```{python}
tb["education"] = tb["education"].replace({"Graduate & Above" : "Graduate"})
tb["education"].value_counts()

```

Now, run the code below to reorder the education levels by converting the `education` variable into a categorical variable with the levels defined in a specific order:

```{python}
education_levels = [
    "No Education",
    "Primary",
    "Middle",
    "Secondary",
    "Higher Secondary",
    "Graduate",
    "Missing",
]

tb["education"] = pd.Categorical(
    tb["education"], categories=education_levels, ordered=True
)
```

Now, inspect the `education` variable again to make sure it has been reordered correctly:

```{python}
tb["education"].value_counts()
```

We will use the newly transformed `education` variable for grouping, summarizing, and plotting below.

### Table of Costs by Education Level

Let's compare the cost of treatment at different health facilities using a summary table. Use pandas methods to group by education level and create a summary table with two variables:

- The number of patients in each education level
- The mean total cost for each education level

Store the resulting DataFrame as an object called `edu_cost_table`.

```{python}
# Create summary table
edu_cost_table = (
    tb.groupby("education")
    .agg(num_patients=("education", "size"), mean_cost=("total_cost", "mean"))
    .reset_index()
)
edu_cost_table
```

Reorder the rows of the summary table to go from highest to lowest mean cost. You can use the `sort_values()` method to do this.

```{python}
# Reorder summary table
edu_cost_table = edu_cost_table.sort_values("mean_cost", ascending=False)
edu_cost_table
```

Which education level has the highest mean total cost of treatment?

**Graduate level has the highest mean total cost of treatment.**

Below, we will visualize the data with a plot to see if there is a relationship between education level and healthcare costs.

### Visualize Costs by Education Level

Using `plotly.express` and the costs summary table you created earlier, create a bar plot of mean costs by education level. It should be sorted from lowest education level to highest education level.

```{python}
fig = px.bar( edu_cost_table, x="education", y="mean_cost", 
title="Mean Cost by Educational Level",
    labels={
        "education": "Level of Education",
        "mean_cost": "Mean Cost"
    },
    category_orders={"education" : education_levels},
    text=edu_cost_table["mean_cost"].round(0)
)
fig.write_image("edu_cost_plot.png")
```

Write a short interpretation of the plot.

There appears to be a relationship between education level and healthcare costs. Higher education levels, particularly for graduates, are associated with higher mean healthcare costs, while lower education levels, such as "No Education" or "Primary," correspond to lower mean costs. This suggests that individuals with higher education levels may incur more healthcare costs on average.

## Investigating Healthcare Costs by Age Group

### Create an `age_group` Variable

The `age` variable records the age of each patient in years. We want to classify the patients into four approximately equally-sized age groups for further analysis.

First, run the code below to determine the quantiles of the `age` variable to decide the cutoffs for each age group:

```{python}
# Determine quantiles of age
tb["age"].describe()
```

Based on the quantile markers (min, 25%, 50%, 75%, max), we can note the following four age groups with approximately equal numbers of patients:

- 18-36
- 37-47
- 48-57
- 58+

Use a custom function called `assign_age_group()`, then vectorize it using `np.vectorize()` and apply it to the `age` variable to create an `age_group` variable.

(If you prefer, you can also use `pd.cut()` to create the `age_group` variable.)

```{python}
def age_group(age):
    if age >= 18 and age <= 36:
        return "18 - 36"
    elif age >= 37 and age <= 47:
        return "37 - 47"
    elif age >= 48 and age <= 57:
        return "48 - 57"
    elif age >= 58:
        return "58+"
    else:
        return None 

assign_age_group = np.vectorize(age_group)
tb["age_group"] = assign_age_group(tb["age"])
tb
```

Now, check if we met our goal of having a similar number of patients in each age group using the `value_counts()` method:

```{python}
# Tabulate age groups
tb["age_group"].value_counts(normalize=True)
```

**Checkpoint:** If you classified the age groups correctly, you will see that each age group has approximately 24-26% of the patients.

### Table of Costs by Age Group

Next, summarize the total healthcare costs by age group. Use pandas methods to group by `age_group` and create a summary table with two variables:

- The number of patients in each age group
- The mean total cost for each age group

Store the resulting DataFrame as an object called `age_cost_table`.

```{python}
# Create summary table for age groups
age_cost_table = (
    tb.groupby("age_group")
    .agg(num_patients=("age_group", "size"), mean_cost=("total_cost", "mean"))).reset_index()
age_cost_table   

```

### Visualize Costs by Age Group

Using `plotly.express` and the costs summary table you created earlier, create a bar plot of mean costs by age group.

```{python}
plot = px.bar( age_cost_table, x="age_group", y="mean_cost",
title="Mean Cost by Age Group",
    labels={
        "age_group": "Age Group",
        "mean_cost": "Mean Cost"
    },
    category_orders={"age_group": ["18 -36", "37-47", "48-57", "58+"]},
    text=age_cost_table['mean_cost'].round(0)
)
plot.write_image("age_cost_plot.png")
```

Write a short interpretation of the plot.

The plot suggests that younger adults (ages 18 - 36) have the highest mean cost, while those in the "48 - 57" age group have the lowest. The cost slightly increases again in the "58+" age group. This trend could indicate that younger adults may have higher healthcare expenses, while middle-aged individuals incur lower costs, with a modest rise again in older age.

## Bonus Challenge (Optional and Ungraded)

If you finish early and have extra time, you can explore and transform the dataset further.

We can look at two types of health facilities in the dataset: private and public (government).

```{python}
# List of healthcare locations
tb["first_visit_location"].unique()
```

Note: PHC = primary health center, GH = govt hospital, etc.

### Comparing Delays in Public vs Private Health Facilities

Let's create a new variable indicating whether a healthcare location is private or public. We can do this using the `str.contains()` function from pandas.

```{python}
tb['first_visit_type'] = np.where(
    tb['first_visit_location'].str.contains('Pvt'),
    'Private',
    'Public'
)
tb
```

Inspect the new variable in `tb`.

Your assignment for this challenge is to summarize delays in treatment and compare the length of delays between private and public health facilities.

You can start by making a summary table of `treatment_initiation_delay_in_days`, grouped by `first_visit_type`. Then visualize the data and draw insights from your findings.

```{python}
# Summary table of treatment initiation delays in days
treatment_init_delays_table = (
    tb.groupby("first_visit_type")
    .agg(
        mean_tid_in_days=("treatment_initiation_delay_(in_days)", "mean"),
        median_tid_in_days=("treatment_initiation_delay_(in_days)", "median"),
        min_tid_in_days=("treatment_initiation_delay_(in_days)", "min"),
        max_tid_in_days=("treatment_initiation_delay_(in_days)", "max"),
        std_tid_in_days=("treatment_initiation_delay_(in_days)", "std"),
        count=("first_visit_type", "count"),
    )
).reset_index()

treatment_init_delays_table

```


```{python}
# Violin Plot for Treatment Initiation Delay by Visit Type
fig_violin = px.violin(
    tb,
    x="first_visit_type",
    y="treatment_initiation_delay_(in_days)",
    box=True,
    points="all",  # Show all points as dots
    title="Violin Plot of Treatment Initiation Delay by Facility Type",
    color="first_visit_type",  # This adds color differentiation based on the visit type
    labels={
        "first_visit_type": "Facility Type",
        "treatment_initiation_delay_(in_days)": "Treatment Initiation Delay (Days)",
    },
)
fig_violin.update_xaxes(tickangle=45)
fig_violin.write_image("delay_violin.png")

```

This violin plot provides a detailed view of the distribution of treatment initiation delays by facility type (public and private). Here are some insights we can derive:

**Distribution Shape**: Both public and private facilities have a similar shape in their distribution, with most delays clustered between 0 and 20 days. This indicates that a large proportion of patients in both facility types begin treatment within this period.

**Density of Short Delays**: The wider sections near 0–20 days show high density for both facility types, reinforcing that most patients experience relatively short delays in treatment initiation. However, public facilities have a slightly more pronounced density near the lower delay times compared to private facilities, indicating that public facilities might be slightly quicker for the majority of cases.

**Longer Delays and Outliers**: For both facility types, there are long-tail distributions with some delays extending to over 100 days, though these are rare. Private facilities, in particular, show a longer tail, suggesting that some patients experience unusually long delays. This long tail could reflect certain inefficiencies or unique cases in private facilities that cause these delays.

**Variation in Delays**: The boxplots embedded within each violin plot confirm that the interquartile range (IQR) is similar across facility types, suggesting comparable variability for the majority of patients. However, the longer tail in private facilities points to higher variability in extreme cases.

**Interpretation**
The majority of patients in both public and private facilities experience similar and relatively short treatment initiation delays. However, private facilities seem to have a slightly higher likelihood of very long delays for a small subset of patients, as shown by the extended tail. This could be due to a range of factors, such as administrative processes, access to specific resources, or patient demographics. Identifying and analyzing the factors contributing to these delays might help in improving treatment timeliness in private facilities.


## Wrap Up

That's it for this assignment! Feel free to explore further and share your findings.