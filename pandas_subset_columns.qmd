
# Subsetting Columns 

# Imports


```{python}
import pandas as pd

```


```{python}
yao = pd.read_csv("C:/Users/ester.nepolo.GFP-PMU/Desktop/Desktop 2024/My Courses/Python/graph_courses_python/data/yaounde_data.csv")
yao
```


## Selecting Columns with square brackets


```{python}
yao [["age", "sex"]] # the first square bracket define the list while the second square bracket allow us to access the variable within the dataframe
```


```{python}
# this code does not work
# yao["age", "sex"]
```


```{python}
yao["age"]
```


```{python}
yao[["age"]]
```

## Storing data subsets


```{python}
yao_subset = yao [["age", "sex"]]

```


```{python}
yao_subset
```


```{python}
yao_subset = yao_subset[["age"]]
```


```{python}
yao_subset
```

## Practice Q: Select Columns with []

Use the [] operator to select the weight_kg and height_cm variables in the yao DataFrame. Assign the result to a new dataframe called yao_weight_height. 


```{python}
yao_weight_height = yao[["weight_kg", "height_cm"]]
yao_weight_height
```

##  Excluding columns with drop()


```{python}
yao_subset = yao.drop(columns=["age"])
yao_subset
```


```{python}
yao_subset = yao.drop(columns=["age", "age_category"])
yao_subset
```

# Practice Q: Drop Columns with drop()

From the yao dataframe, remove the columns highest_education and consultation. 

Assign the result to a new dataframe called yao_no_education_consultation. 

Print this new dataframe.


```{python}
yao_no_education_consultation = yao.drop(columns=["highest_education", "consultation"])

yao_no_education_consultation
```

## Using filter() to select columns by regex

Regex = Regular Expressions


```{python}
yao.filter(regex="ig")
```

```{python}
yao.filter(regex="^ig") #"^" denotes starts with "ig"
```

```{python}
yao.filter(regex="result$") #"$" denotes ends with "result"
# regex are hard to remember, thus it is better to either google regex cheatseats or ask ChatGpt
```

## Practice Q: Select Columns with Regex

Select all columns in the yao dataframe that start with “is_”.

Assign the result to a new dataframe called yao_is_columns. 

Then print this new DataFrame.


```{python}
yao_is_columns = yao.filter(regex="^is_")

yao_is_columns
```

## Change column names with rename()

```{python}
yao.rename(columns={"age": "patient_age", "sex": "patient_sex"})
```

## Practice Q: Rename Columns with rename()

Rename the age_category column in the yao dataframe to age_cat. 

Assign the result to a new dataframe called yao_age_cat. 

Then print this new dataframe.

```{python}
yao_age_cat = yao.rename(columns={"age_category": "age_cat", "sex": "patient_sex"})

yao_age_cat
```

## Cleaning messy column names


```{python}
test_df = pd.DataFrame(
    {"good_name": range(3), "bad name": range(3), "bad*@name*2": range(3)}
)
test_df
```


```{python}
test_df.good_name # this works
```


```{python}
# bad names are not accessible through dot syntax
#test_df.bad name
```


```{python}
test_df.columns.str.replace(r'[^a-zA-Z0-9]', '_', regex=True) # we use regex to clean, replace bad names with undescores, starts with small letter etc
```


```{python}
test_df.columns = test_df.columns.str.replace(r'[^a-zA-Z0-9]', '_', regex=True)

test_df.columns
```

## Practice Q: Clean Column Names with regex

Consider the data frame defined below with messy column names. 

Use the str.replace() method to clean the column names.


```{python}
cleaning_practice = pd.DataFrame(
    {"Aloha": range(3), "Bell Chart": range(3), "Animals@the zoo": range(3)}
)
cleaning_practice
```

```{python}
cleaning_practice.columns.str.replace(r'[^a-zA-Z0-9]', '_', regex=True)
```

```{python}
cleaning_practice.columns = cleaning_practice.columns.str.replace(r'[^a-zA-Z0-9]', '_', regex=True)

cleaning_practice.columns
```


```{python}
cleaning_practice
```