
```{python}
import plotly.express as px
import pandas as pd
```
# Sample Data for Trends Over Time

```{python}
data = {
    "Quarter": ["Jan - March", "April - June", "July - September"],
    "TCS-1a_Target": [93, 93, 94],
    "TCS-1a_Result": [97, 98, 98],
    "TCS-1b_Target": [87, 87, 89],
    "TCS-1b_Result": [91, 91, 90],
    "TCS-10_Target": [98, 98, 98],
    "TCS-10_Result": [101, 94, 95],
    "VT_Target": [96, 96, 96],
    "VT_Result": [82, 81, 77]  
}
HIV1_df = pd.DataFrame(data)
HIV1_df
```

```{python}
# Reshape the data to a long format for easier plotting
HIV1_long_df = pd.melt(HIV1_df, id_vars="Quarter", var_name="Indicators", value_name="Value")

# Split Indicator into Indicator_Type (e.g., TCS-1a, TCS-2a) and Measurement (Target, Result)
HIV1_long_df[['Indicators', 'Measurement']] = HIV1_long_df['Indicators'].str.split('_', expand=True)

# Define color mapping for Measurement categories
color_discrete_map = {"Target": "blue", "Result": "orange"}

# Plot using Plotly Express with data labels
fig = px.bar(
    HIV1_long_df,
    x="Indicators",
    y="Value",
    color="Measurement",
    color_discrete_map=color_discrete_map,  # Apply custom colors
    barmode="group",
    facet_col="Quarter",
    title="Targets and Performance per Quarter",
    text="Value"  # Adding data labels
)

# Customize layout
fig.update_traces(textposition="outside")  # Position data labels outside of bars
fig.update_layout(
    xaxis_title="Indicators",
    yaxis_title="Performance (%)",
    legend_title="",
    xaxis_tickangle=-45,
    margin=dict(t=50, l=50, r=50, b=50)
)

# Remove "Quarter=" prefix from facet titles
fig.for_each_annotation(lambda a: a.update(text=a.text.replace("Quarter=", "")))

# Show only one x-axis label for "Indicators"
fig.update_xaxes(matches='x')  # Sync x-axes across facets
fig.update_yaxes(matches='y')  # Sync y-axes across facets

fig.show()
```


```{python}
data = {
    "Quarter": ["Jan - March", "April - June", "July - September"],
    "KP-1a_Target": [0, 693, 1363],
    "KP-1a_Result": [0, 0, 51],
    "KP-6a_Target": [0, 83, 80],
    "KP-6a_Result": [0, 0, 1],
    "KP-1c_Target": [0, 806, 1563],
    "KP-1c_Result": [0, 0, 197],
    "KP-6c_Target": [0, 174, 108],
    "KP-6c_Result": [0, 0, 13],
    "YP-2_Target": [0, 3434, 4646],
    "YP-2_Result": [0, 221, 1217],
    "HTS-2_Target": [0, 2748, 3716],
    "HTS-2_Result": [3, 382, 230],
    "YP-4_Target": [0, 61, 216],
    "YP-4_Result": [0, 0, 50],
    "YP-6_Target": [4000, 11910, 11910], 
    "YP-6_Result": [4011, 6501, 4771],  
}
HIV2_df = pd.DataFrame(data)
HIV2_df
```


```{python}
# Reshape the data to a long format for easier plotting
HIV2_long_df = pd.melt(HIV2_df, id_vars="Quarter", var_name="Indicators", value_name="Value")

# Split Indicators into Indicator_Type and Measurement (Target, Result)
HIV2_long_df[['Indicators', 'Measurement']] = HIV2_long_df['Indicators'].str.extract(r'([A-Za-z0-9\-]+)_(Target|Result)')
HIV2_long_df

# Define color mapping for Measurement categories
color_discrete_map = {"Target": "blue", "Result": "orange"}

# Plot using Plotly Express with data labels
fig = px.bar(
    HIV2_long_df,
    x="Indicators",
    y="Value",
    color="Measurement",
    color_discrete_map=color_discrete_map,  # Apply custom colors
    barmode="group",
    facet_col="Quarter",
    title="Targets and Performance per Quarter",
    text="Value"  # Adding data labels
)

# Customize layout
fig.update_traces(textposition="outside", 
textangle=90, textfont_size=9,
textfont=dict(size = 9)

 )  # Position data labels outside of bars
fig.update_layout(
    xaxis_title="Indicators",
    yaxis_title="Performance (n)",
    legend_title="",
    yaxis_range=[0,15000],
    uniformtext_minsize=9,
    font=dict(size=11)
)

# Remove "Quarter=" prefix from facet titles
fig.for_each_annotation(lambda a: a.update(text=a.text.replace("Quarter=", "")))

# Show only one x-axis label for "Indicators"
fig.update_xaxes(matches='x')  # Sync x-axes across facets
fig.update_yaxes(matches='y')  # Sync y-axes across facets

fig.show()
```

```{python}
data = {
    "Quarter": ["Jan - March", "April - June", "July - September"],
    "YP-2_Target": [0, 3434, 4646],
    "YP-2_Result": [0, 221, 1217],
    "HTS_2_Target": [0, 2748, 3716],
    "HTS_2_Result": [3, 382, 230],
    "YP_4_Target": [0, 61, 216],
    "YP_4_Result": [0, 0, 50]
}
AGYW_df = pd.DataFrame(data)
AGYW_df

```

```{python}
AGYW_df = pd.DataFrame(data)

# Reshape the data to long format for Plotly Express
long_df = AGYW_df.melt(id_vars=["Quarter"], value_vars=["YP-2_Target", "YP-2_Result", "HTS_2_Target", "HTS_2_Result"],
                       var_name="Category", value_name="Value")

# Plot the histogram 
fig = px.histogram(long_df, x="Value", color="Category", barmode="overlay", opacity=0.75,
                   facet_col="Quarter", # This will separate the data by Quarter
                   title="Overlay Histogram of YP-2 and HTS-2 Targets and Results",
                   labels={"Value": "Values", "Category": "Category", "Quarter": "Quarter"})

# Show the plot
fig.show()
```


```{python}
data = {
    "Quarter": ["Jan - March", "April - June", "July - September"],
    "TBDT-1_Target": [1702, 1702, 1703],
    "TBDT-1_Result": [2182, 1758, 2260],
    "DRTB-2_Target": [49, 50, 49],
    "DRTB-2_Result": [64, 45, 68]
}
TB1_df = pd.DataFrame(data)
TB1_df
```


```{python}
# Reshape the data to a long format for easier plotting
TB1_long_df = pd.melt(TB1_df, id_vars="Quarter", var_name="Indicators", value_name="Value")

# Split Indicators into Indicator and Measurement (Target, Result)
TB1_long_df[['Indicator', 'Measurement']] = TB1_long_df['Indicators'].str.extract(r'([A-Za-z0-9\-]+)_(Target|Result)')

# Define color mapping for Measurement categories
color_discrete_map = {"Target": "blue", "Result": "orange"}

# Plot using Plotly Express with data labels
fig = px.bar(
    TB1_long_df,
    x="Indicator",
    y="Value",
    color="Measurement",
    color_discrete_map=color_discrete_map,  # Apply custom colors
    barmode="group",
    facet_col="Quarter",
    title="Targets and Performance per Quarter",
    text="Value"  # Adding data labels
)

# Customize layout
fig.update_traces(textposition="outside")  # Position data labels outside of bars
fig.update_layout(
    xaxis_title="Indicators",
    yaxis_title="Performance (n)",
    legend_title="",
    xaxis_tickangle=-45,
    margin=dict(t=50, l=50, r=50, b=50)
)

# Remove "Quarter=" prefix from facet titles
fig.for_each_annotation(lambda a: a.update(text=a.text.replace("Quarter=", "")))

# Sync x-axis and y-axis across all facets
fig.update_xaxes(matches='x')
fig.update_yaxes(matches='y')

# Show the plot
fig.show()
```

```{python}
data = {
    "Quarter": ["Jan - March", "April - June", "July - September"],
    "TBDT-4_Target": [85, 85, 85],
    "TBDT-4_Result": [91, 92, 87],
    "DRTB-3_Target": [98, 98, 98],
    "DRTB-3_Result": [94, 91, 93],
    "TB/HIV-6_Target": [99, 99, 99],
    "TB/HIV-6_Result": [96, 97, 95]
}
TB2_df = pd.DataFrame(data)
TB2_df
```


```{python}
# Reshape the data to a long format for easier plotting
TB2_long_df = pd.melt(TB2_df, id_vars="Quarter", var_name="Indicators", value_name="Value")

# Split Indicators into Indicator and Measurement (Target, Result)
TB2_long_df[['Indicator', 'Measurement']] = TB2_long_df['Indicators'].str.split('_', expand=True)

# Define color mapping for Measurement categories
color_discrete_map = {"Target": "blue", "Result": "orange"}

# Plot using Plotly Express with data labels
fig = px.bar(
    TB2_long_df,
    x="Indicator",
    y="Value",
    color="Measurement",
    color_discrete_map=color_discrete_map,  # Apply custom colors
    barmode="group",
    facet_col="Quarter",
    title="Targets and Performance per Quarter",
    text="Value"  # Adding data labels
)

# Customize layout
fig.update_traces(textposition="outside")  # Position data labels outside of bars
fig.update_layout(
    xaxis_title="Indicators",
    yaxis_title="Performance (%)",
    legend_title="",
    xaxis_tickangle=-45,
    margin=dict(t=50, l=50, r=50, b=50)
)

# Remove "Quarter=" prefix from facet titles
fig.for_each_annotation(lambda a: a.update(text=a.text.replace("Quarter=", "")))

# Sync x-axis and y-axis across all facets
fig.update_xaxes(matches='x')
fig.update_yaxes(matches='y')

# Show the plot
fig.show()
```


```{python}
data = {
    "Quarter": ["Jan - March", "April - June", "July - September"],
    "CM-1a_Target": [100, 100, 100],
    "CM-1a_Result": [92, 96, 97],
    "CM-1b_Target": [100, 100, 100],
    "CM-1b_Result": [100, 100, 100],
    "CM-2a_Target": [100, 100, 100],
    "CM-2a_Result": [101, 100, 101],
    "CM-2b_Target": [90, 90, 90],
    "CM-2b_Result": [91, 89, 77],  
}

Mal1_df = pd.DataFrame(data)
Mal1_df
```


```{python}
# Reshape the data to a long format for easier plotting
Mal1_long_df = pd.melt(Mal1_df, id_vars="Quarter", var_name="Indicators", value_name="Value")

# Split Indicators into Indicator and Measurement (Target, Result)
Mal1_long_df[['Indicator', 'Measurement']] = Mal1_long_df['Indicators'].str.split('_', expand=True)

# Define color mapping for Measurement categories
color_discrete_map = {"Target": "blue", "Result": "orange"}

# Plot using Plotly Express with data labels
fig = px.bar(
    Mal1_long_df,
    x="Indicator",
    y="Value",
    color="Measurement",
    color_discrete_map=color_discrete_map,  # Apply custom colors
    barmode="group",
    facet_col="Quarter",
    title="Targets and Performance per Quarter",
    text="Value"  # Adding data labels
)

# Customize layout
fig.update_traces(textposition="outside")  # Position data labels outside of bars
fig.update_layout(
    xaxis_title="Indicators",
    yaxis_title="Performance (%)",
    legend_title="",
    xaxis_tickangle=-45,
    margin=dict(t=50, l=50, r=50, b=50)
)

# Remove "Quarter=" prefix from facet titles
fig.for_each_annotation(lambda a: a.update(text=a.text.replace("Quarter=", "")))

# Sync x-axis and y-axis across all facets
fig.update_xaxes(matches='x')
fig.update_yaxes(matches='y')

# Show the plot
fig.show()
```



```{python}
data = {
    "Quarter": ["Jan - March", "April - June", "July - September"],
    "CM-7_Target": [80, 80, 80],
    "CM-7_Result": [92, 96, 100],
    "CM-8_Target": [100, 100, 100],
    "CM-8_Result": [92, 100, 100],
    "VC-7_Target": [75, 0, 0],
    "VC-7_Result": [18, 0, 0] 
}

Mal2_df = pd.DataFrame(data)
Mal2_df
```

```{python}
# Reshape the data to a long format for easier plotting
Mal2_long_df = pd.melt(Mal2_df, id_vars="Quarter", var_name="Indicators", value_name="Value")

# Split Indicators into Indicator and Measurement (Target, Result)
Mal2_long_df[['Indicators', 'Measurement']] = Mal2_long_df['Indicators'].str.split('_', expand=True)

# Define color mapping for Measurement categories
color_discrete_map = {"Target": "blue", "Result": "orange"}

# Plot using Plotly Express with data labels
fig = px.bar(
    Mal2_long_df,
    x="Indicators",
    y="Value",
    color="Measurement",
    color_discrete_map=color_discrete_map,  # Apply custom colors
    barmode="group",
    facet_col="Quarter",
    title="Targets and Performance per Quarter",
    text="Value"  # Adding data labels
)

# Customize layout
fig.update_traces(textposition="outside")  # Position data labels outside of bars
fig.update_layout(
    xaxis_title="Indicators",
    yaxis_title="Performance (%)",
    legend_title="",
    xaxis_tickangle=-45,
    margin=dict(t=50, l=50, r=50, b=50)
)

# Remove "Quarter=" prefix from facet titles
fig.for_each_annotation(lambda a: a.update(text=a.text.replace("Quarter=", "")))

# Sync x-axis and y-axis across all facets
fig.update_xaxes(matches='x')
fig.update_yaxes(matches='y')

# Show the plot
fig.show()
```

```{python}
data = {
    "Quarter": ["Jan - March", "April - June", "July - September"],
    "M&E_4.1_Target": [85, 85, 85],
    "M&E_4.1_Result": [97, 95, 93],
    "M&E_5_Target": [0, 100, 0],
    "M&E_5_Result": [0, 100, 0],
    "M&E_9_Target": [100, 100, 100],
    "M&E_9_Result": [100, 100, 100],
    "Lab_2_Target": [0, 96, 0],
    "Lab_2_Result": [0, 95, 0] 
}
C19RM1_df = pd.DataFrame(data)
C19RM1_df
```

```{python}
# Reshape the data to a long format for easier plotting
C19RM1_long_df = pd.melt(C19RM1_df, id_vars="Quarter", var_name="Indicators", value_name="Value")

# Use regular expression to split `Indicators` into `Indicator` and `Measurement`
C19RM1_long_df[['Indicator', 'Measurement']] = C19RM1_long_df['Indicators'].str.extract(r'(.+?)_(Target|Result)')

# Define color mapping for Measurement categories
color_discrete_map = {"Target": "blue", "Result": "orange"}

# Plot using Plotly Express with data labels
fig = px.bar(
    C19RM1_long_df,
    x="Indicator",
    y="Value",
    color="Measurement",
    color_discrete_map=color_discrete_map,  # Apply custom colors
    barmode="group",
    facet_col="Quarter",
    title="Targets and Performance per Quarter",
    text="Value"  # Adding data labels
)

# Customize layout
fig.update_traces(textposition="outside")  # Position data labels outside of bars
fig.update_layout(
    xaxis_title="Indicators",
    yaxis_title="Performance (%)",
    legend_title="",
    xaxis_tickangle=-45,
    margin=dict(t=50, l=50, r=50, b=50)
)

# Remove "Quarter=" prefix from facet titles
fig.for_each_annotation(lambda a: a.update(text=a.text.replace("Quarter=", "")))

# Sync x-axis and y-axis across all facets
fig.update_xaxes(matches='x')
fig.update_yaxes(matches='y')

# Show the plot
fig.show()
```


```{python}
data = {
    "Quarter": ["Jan - March", "April - June", "July - September"],

    "RCS_3_PSA_P_Target": [4, 4, 4],
    "RCS_3_PSA_P_Result": [4, 4, 4] 
}
C19RM2_df = pd.DataFrame(data)
C19RM2_df
```


```{python}
# Reshape the data to a long format for easier plotting
C19RM2_long_df = pd.melt(C19RM2_df, id_vars="Quarter", var_name="Indicators", value_name="Value")

# Split Indicators into Indicator and Measurement (Target, Result)
C19RM2_long_df[['Indicator', 'Measurement']] = C19RM2_long_df['Indicators'].str.extract(r'([A-Za-z0-9\_]+)_(Target|Result)')

# Define color mapping for Measurement categories
color_discrete_map = {"Target": "blue", "Result": "orange"}

# Plot using Plotly Express with data labels
fig = px.bar(
    C19RM2_long_df,
    x="Indicator",
    y="Value",
    color="Measurement",
    color_discrete_map=color_discrete_map,  # Apply custom colors
    barmode="group",
    facet_col="Quarter",
    title="Targets and Performance per Quarter",
    text="Value"  # Adding data labels
)

# Customize layout
fig.update_traces(textposition="outside")  # Position data labels outside of bars
fig.update_layout(
    xaxis_title="Indicators",
    yaxis_title="Performance (n)",
    legend_title="",
    xaxis_tickangle=-45,
    margin=dict(t=50, l=50, r=50, b=50)
)

# Remove "Quarter=" prefix from facet titles
fig.for_each_annotation(lambda a: a.update(text=a.text.replace("Quarter=", "")))

# Sync x-axis and y-axis across all facets
fig.update_xaxes(matches='x')
fig.update_yaxes(matches='y')

# Show the plot
fig.show()
```


```{python}
data = {
    "Quarter": ["Jan - March", "April - June", "July - September"],
    "Completeness_Target": [100, 100, 100],
    "Completeness_Result": [95, 100, 99],
    "Timeliness_Target": [100, 100, 100],
    "Timeliness_Result": [93, 93, 92],
}
Reporting_rate_df = pd.DataFrame(data)
Reporting_rate_df
```

```{python}
# Reshape the data to a long format for easier plotting
Reporting_rate_df_long_df = pd.melt(Reporting_rate_df, id_vars="Quarter", var_name="Indicators", value_name="Value")

# Split Indicators into Indicator and Measurement (Target, Result)
Reporting_rate_df_long_df[['Indicator', 'Measurement']] = Reporting_rate_df_long_df['Indicators'].str.extract(r'([A-Za-z0-9\_]+)_(Target|Result)')

# Define color mapping for Measurement categories
color_discrete_map = {"Target": "blue", "Result": "orange"}

# Plot using Plotly Express with data labels
fig = px.bar(
    Reporting_rate_df_long_df,
    x="Indicator",
    y="Value",
    color="Measurement",
    color_discrete_map=color_discrete_map,  # Apply custom colors
    barmode="group",
    facet_col="Quarter",
    title="Targets and Performance per Quarter",
    text="Value"  # Adding data labels
)

# Customize layout
fig.update_traces(textposition="outside")  # Position data labels outside of bars
fig.update_layout(
    xaxis_title="Indicators",
    yaxis_title="Performance (%)",
    legend_title="",
    xaxis_tickangle=-45,
    margin=dict(t=50, l=50, r=50, b=50)
)

# Remove "Quarter=" prefix from facet titles
fig.for_each_annotation(lambda a: a.update(text=a.text.replace("Quarter=", "")))

# Sync x-axis and y-axis across all facets
fig.update_xaxes(matches='x')
fig.update_yaxes(matches='y')

# Show the plot
fig.show()
```







```{python}
# Line Chart
fig = px.line(df, x="Year", y=["HIV_Prevalence_Rate", "TB_Prevalence_Rate", "Malaria_Prevalence_Rate"],
              labels={"value": "Prevalence Rate (%)", "variable": "Disease"},
              title="Trends in Disease Prevalence Over Time")
fig.update_traces(mode="lines+markers")
fig.show()
```


```{python}
# Sample Data for Regional Comparison
region_data = {
    "Region": ["Region A", "Region B", "Region C", "Region D"],
    "HIV_Prevalence": [1.2, 1.8, 1.6, 1.1],
    "TB_Prevalence": [0.7, 0.9, 0.8, 0.65],
    "Malaria_Prevalence": [0.3, 0.4, 0.35, 0.25]
}
df_region = pd.DataFrame(region_data)

# Bar Chart
fig = px.bar(df_region, x="Region", y=["HIV_Prevalence", "TB_Prevalence", "Malaria_Prevalence"],
             labels={"value": "Prevalence Rate (%)", "variable": "Disease"},
             title="Prevalence Rates by Region")
fig.update_layout(barmode="group")
fig.show()

```

```{python}
# Reshape the data to a long format for easier plotting
C19RM1_long_df = pd.melt(C19RM1_df, id_vars="Quarter", var_name="Indicators", value_name="Value")

# Split Indicators into Indicator and Measurement (Target, Result)
C19RM1_long_df[['Indicator', 'Measurement']] = C19RM1_long_df['Indicators'].str.split('_', expand=True)

# Define color mapping for Measurement categories
color_discrete_map = {"Target": "blue", "Result": "orange"}

# Plot using Plotly Express with data labels
fig = px.bar(
    C19RM1_long_df,
    x="Indicator",
    y="Value",
    color="Measurement",
    color_discrete_map=color_discrete_map,  # Apply custom colors
    barmode="group",
    facet_col="Quarter",
    title="Targets and Performance per Quarter",
    text="Value"  # Adding data labels
)

# Customize layout
fig.update_traces(textposition="outside")  # Position data labels outside of bars
fig.update_layout(
    xaxis_title="Indicators",
    yaxis_title="Performance (%)",
    legend_title="",
    xaxis_tickangle=-45,
    margin=dict(t=50, l=50, r=50, b=50)
)

# Remove "Quarter=" prefix from facet titles
fig.for_each_annotation(lambda a: a.update(text=a.text.replace("Quarter=", "")))

# Sync x-axis and y-axis across all facets
fig.update_xaxes(matches='x')
fig.update_yaxes(matches='y')

# Show the plot
fig.show()
```




```{python}
import plotly.graph_objects as go

# Sample Data for WPTMs
wptm_data = {
    "WPTM": ["Measure 1", "Measure 2", "Measure 3", "Measure 4"],
    "Progress": [75, 50, 90, 40]  # Progress in percentage
}

fig = go.Figure()

for i, measure in enumerate(wptm_data["WPTM"]):
    fig.add_trace(go.Indicator(
        mode="gauge+number",
        value=wptm_data["Progress"][i],
        title={"text": measure},
        gauge={"axis": {"range": [0, 100]}, "bar": {"color": "green" if wptm_data["Progress"][i] >= 70 else "red"}},
        domain={"x": [0.25 * i, 0.25 * (i + 1)], "y": [0, 1]}
    ))

fig.update_layout(title="Work Plan Tracking Measures Progress")
fig.show()

```


```{python}
# Sample Data for Map Visualization
map_data = {
    "Region": ["Region A", "Region B", "Region C", "Region D"],
    "Prevalence": [1.2, 1.8, 1.6, 1.1],
    "Latitude": [34.5, -1.9, 1.5, 7.0],  # Sample latitudes
    "Longitude": [69.1, 29.8, 31.4, 34.0]  # Sample longitudes
}
df_map = pd.DataFrame(map_data)

# Map Visualization
fig = px.scatter_mapbox(df_map, lat="Latitude", lon="Longitude", size="Prevalence", color="Prevalence",
                        color_continuous_scale=px.colors.sequential.Bluered,
                        mapbox_style="carto-positron", zoom=3, title="Disease Prevalence by Region")

fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.show()

```