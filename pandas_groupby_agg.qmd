


## Learning objectives

1. You can use pandas.DataFrame.agg() to extract summary statistics from datasets.

2. You can use pandas.DataFrame.groupby() to group data by one or more variables before performing operations on them.

3. You can pass custom functions to agg() to compute summary statistics.

## Imports

```{python}
import pandas as pd
import numpy as np
```

## Data 

```{python}
yao = pd.read_csv("data/yaounde_mini.csv")
yao

```

## Introduce agg


```{python}
# Classical method
yao["age"].mean()
```


```{python}
# with agg
yao.agg(mean_age=("age", "mean")) # tuple
```

Syntax:
df.agg(summary_name=("column to summarise", "summary function"))


```{python}
# agg allows you to compute multiple statistics at once
yao_summary = yao.agg(mean_age=("age", "mean"), median_age=("age", "median"))
yao_summary
```

## Practice Q: Mean and median weight

Use agg() and the relevant summary functions to obtain the mean and median of respondent weights from the weight_kg variable of the yao data frame.


```{python}
yao_weight_summary = yao.agg(mean_weight = ("weight_kg", "mean"), median_weight=("weight_kg", "median"))
yao_weight_summary
```

## Introducing groupby

```{python}
# this creates a multi index data frame
yao.groupby("sex").agg(mean_age=("age", "mean"), median_age=("age", "median"))
```


```{python}
# to have the headers in a single row, we add reset_index()
yao.groupby("sex").agg(mean_age=("age", "mean"), median_age=("age", "median")).reset_index()
```


```{python}
# to make the code more readable and understandable
(
yao
    .groupby("sex")
    .agg(mean_age=("age", "mean"), median_age=("age", "median"))
    .reset_index()
)
```

Max & min weights + num of individuals per neighbourhood

```{python}
(
    yao.groupby("neighborhood")
    .agg(
        max_weight=("weight_kg","max"), min_weight=("weight_kg", "min"),
        num_indis=("weight_kg", "size"),
        )
        .reset_index()
)
```

## Practice Q: Min and max height per sex
Use groupby(), agg(), and the relevant summary functions to obtain the minimum and maximum heights for each sex in the yao data frame, as well as the number of individuals in each sex group.

Your output should be a DataFrame that looks like this:

sex	min_height_cm	max_height_cm	count
Female			
Male			


```{python}
(
    yao.groupby("sex")
    .agg(
        min_height_cm=("height_cm","min"), max_height_cm=("height_cm", "max"),
        count=("height_cm", "size"),
        )
        .reset_index()
)
```

# Nested groupings


```{python}
(
    yao.groupby(["neighborhood", "sex"])
    .agg(
        max_weight=("weight_kg","max"), min_weight=("weight_kg", "min"),
        num_indis=("weight_kg", "size"),
        )
        .reset_index()
)
```

## Practice Q: Min and max height per age sex group
Use groupby(), agg(), and min() and max() to get the minimum and maximum heights for each age-sex group in the yao data frame. The variables needed are age_category_3 and sex.

Your output should be a DataFrame that looks like this:

age_category_3	sex	min_height	max_height
Adult	Female	78	185
Adult	Male	147	196
Child	Female	54	183
Child	Male	96	190
Senior	Female	143	174
Senior	Male	160	195


```{python}
(
    yao.groupby(["age_category_3","sex"])
    .agg(
        min_height_cm=("height_cm","min"), max_height_cm=("height_cm", "max")
        )
        .reset_index()
)
```

## NaN values in agg()


```{python}
# this does not code drops NAs/NaN
(
yao.groupby("is_smoker")
    .agg(weight_mean = ("weight_kg", "mean"))
)
```


```{python}
# this does accounts for NAs/NaN
(
yao.groupby("is_smoker", dropna=False)
    .agg(weight_mean =("weight_kg", "mean"),
        count=("weight_kg", "size"))
)
```

## Practice Q: Mean weight by pregnancy status
Use groupby(), agg(), and the mean() function to obtain the mean weight (kg) by pregnancy status in the yao data frame. Include individuals with NaN pregnancy status in the summary table.

The output data frame should look something like this:

is_pregnant	weight_mean
No	
No response	
Yes	
NaN


```{python}
(
yao.groupby("is_pregnant", dropna=False)
    .agg(weight_mean =("weight_kg", "mean"))
)
```

## Custom stats with lambda functions

```{python}
def range_func(x):
    return max(x) - min(x)

range_func([1,5,6])
```

Using a lambda

```{python}
range_func = lambda x: max(x) - min(x)
range_func([1,5,6])
```

Range of weights per neighborhood

```{python}
(
    yao.groupby("neighborhood")
    .agg(weigh_range=("weight_kg", lambda x: max(x) - min(x)))
)
```

Coefficient of variation: (std / mean) * 100

```{python}
(
    yao.groupby("neighborhood")
    .agg(weigh_range=("weight_kg", lambda x: (x.std() / x.mean()) * 100))
)
```

# Practice Q: IQR of age by neighborhood

Find the interquartile range (IQR) of the age variable for each neighborhood. The IQR is the difference between the 75th and 25th percentiles. Your lambda will look like this: lambda x: x.quantile(0.75) - x.quantile(0.25)


```{python}
(
    yao.groupby("neighborhood")
    .agg(weigh_range=("weight_kg", 
    lambda x: x.quantile(0.75) - x.quantile(0.25)))
)
```